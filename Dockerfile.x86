FROM ubuntu:16.04
MAINTAINER dyec@us.ibm.com

# Uses a build arg "mode", defined near bottom

# Install package dependencies
RUN apt-get update && apt-get install -y apt-utils
RUN apt-get update && apt-get install -y \
  build-essential \
  cmake \
  curl \
  git \
  libpng12-dev \
  alsa-utils \
  python2.7-dev \
  python-opencv \
  python-pip \
  gettext \
  libopencv-dev \
  libboost-all-dev \
  libssl-dev \
  libcurl4-openssl-dev \
  unzip \
  vim \
  && apt-get autoremove && apt-get clean

# Pip install python deps (qibuild, numpy)
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir qibuild numpy

# Build Self (default config)
RUN mkdir -p /root/src/open-horizon
RUN git clone --branch edge --recursive https://github.com/chrod/self.git /root/src/open-horizon/self
WORKDIR /root/src/open-horizon/self
#COPY tc_install.sh /root/src/open-horizon/self/scripts/tc_install.sh
RUN ./scripts/build_linux.sh

# Sound setup (USB sound card at device 2&3)
COPY config/alsa.conf /usr/share/alsa/alsa.conf

## Clean up all files but essential Self binaries
# Build arg "mode": (blank=standard full size container, "dev": to be used with experimental "docker --squash", for min container size)
ARG mode
RUN /bin/bash -c "if [ 'x$mode' != 'dev' ] ; then pip uninstall -y qibuild && apt -y purge python-pip usbutils gettext unzip cmake build-essential; fi"
RUN /bin/bash -c "if [ 'x$mode' != 'dev' ] ; then ls /root/src/open-horizon/self | grep -v bin | xargs rm -rf; fi"
RUN /bin/bash -c "if [ 'x$mode' != 'dev' ] ; then apt-get -y autoremove; fi"

# Ports
EXPOSE 443
EXPOSE 9443

##############
## Configure and run Self with your own creds:
# cd <self config dir>
# copy in your own bootstrap.json file (use the bootstrap.json example file)
# Run self:
# docker run -it --rm --privileged -p 9443:9443 -v $PWD/config:/config openhorizon/amd64-x86-intu-self:edge /bin/bash -c "ln -s -f /config/bootstrap.json bin/linux/etc/shared/; ln -s -f /config/alsa.conf /usr/share/alsa/alsa.conf; ./bin/linux/run_self.sh"

